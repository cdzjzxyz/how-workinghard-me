CREATE DATABASE `zxyf`;
USE `zxyf`;
----------------------------------------------------------------------------------------------
DELIMITER //
CREATE TRIGGER after_leave_insert_update_attendance
AFTER INSERT ON leave_record
FOR EACH ROW
BEGIN
    DECLARE current_date DATE;
    DECLARE initial_daily_score INT DEFAULT 100;
    DECLARE leave_score INT;

    IF NEW.status = 1 THEN -- 假期被批准
        SET leave_score = initial_daily_score - 1; -- 请假扣1分后的当日分数
        IF leave_score < 0 THEN
            SET leave_score = 0;
        END IF;

        SET current_date = NEW.start_date;
        WHILE current_date <= NEW.end_date DO
            -- 尝试更新已有的考勤记录
            UPDATE attendance
            SET status = 5, -- 5=请假
                performance_score = leave_score
            WHERE emp_id = NEW.emp_id AND date = current_date;

            -- 如果当天没有考勤记录，则插入一条请假记录
            IF ROW_COUNT() = 0 THEN
                INSERT INTO attendance (emp_id, date, status, performance_score, check_in_time, check_out_time)
                VALUES (NEW.emp_id, current_date, 5, leave_score, NULL, NULL);
            END IF;
            SET current_date = DATE_ADD(current_date, INTERVAL 1 DAY);
        END WHILE;
    END IF;
END //
DELIMITER ;
-------------------------------------------------------------
DELIMITER //
CREATE TRIGGER before_attendance_insert_
BEFORE INSERT ON attendance
FOR EACH ROW
BEGIN
    DECLARE v_last_score_this_month INT;
    DECLARE v_base_score_for_calc INT;
    DECLARE v_deduction INT DEFAULT 0;
    DECLARE v_current_status TINYINT;

    -- 步骤1: 确定 status (此部分逻辑需要非常健壮)
    SET v_current_status = NEW.status;
    IF NEW.status IS NULL OR NEW.status = 1 THEN
        IF NEW.check_in_time IS NULL AND NEW.check_out_time IS NULL THEN SET v_current_status = 4;
        ELSEIF NEW.check_in_time IS NULL AND NEW.check_out_time IS NOT NULL THEN SET v_current_status = 4;
        ELSEIF NEW.check_in_time IS NOT NULL THEN
            IF TIME(NEW.check_in_time) > '08:00:00' THEN SET v_current_status = 2;
            ELSE SET v_current_status = 1;
            END IF;
        END IF;
    END IF;
    SET NEW.status = v_current_status;

    -- 步骤2: 获取本月之前的最后分数
    SELECT performance_score INTO v_last_score_this_month
    FROM attendance
    WHERE emp_id = NEW.emp_id
      AND DATE_FORMAT(date, '%Y-%m') = DATE_FORMAT(NEW.date, '%Y-%m')
      AND date < NEW.date
    ORDER BY date DESC, id DESC LIMIT 1;

    IF v_last_score_this_month IS NULL THEN SET v_base_score_for_calc = 100;
    ELSE SET v_base_score_for_calc = v_last_score_this_month;
    END IF;

    -- 步骤3: 计算扣分
    CASE NEW.status
        WHEN 2 THEN SET v_deduction = 2;
        WHEN 3 THEN SET v_deduction = 2;
        WHEN 4 THEN SET v_deduction = 5;
        WHEN 5 THEN SET v_deduction = 1;
        ELSE SET v_deduction = 0;
    END CASE;

    SET NEW.performance_score = v_base_score_for_calc - v_deduction;
    IF NEW.performance_score < 0 THEN SET NEW.performance_score = 0; END IF;
END //
DELIMITER ;
---------------------------------------------------------------------------------------
DELIMITER //
CREATE TRIGGER before_attendance_update
BEFORE UPDATE ON attendance
FOR EACH ROW
BEGIN
    DECLARE v_last_score_this_month INT;
    DECLARE v_base_score_for_calc INT;
    DECLARE v_deduction INT DEFAULT 0;
    DECLARE v_status_changed BOOLEAN DEFAULT FALSE;
    DECLARE v_new_status_intermediate TINYINT;

    SET v_new_status_intermediate = NEW.status; -- 先用新传入的状态

    -- 更新下班时间时，判断早退
    IF NEW.check_out_time IS NOT NULL AND 
       (OLD.check_out_time IS NULL OR NEW.check_out_time <> OLD.check_out_time) AND
       v_new_status_intermediate NOT IN (5, 4) THEN
        IF TIME(NEW.check_out_time) < '19:00:00' THEN SET v_new_status_intermediate = 3;
        ELSEIF OLD.status = 2 THEN SET v_new_status_intermediate = 2;
        ELSE SET v_new_status_intermediate = 1;
        END IF;
    END IF;
    
    SET NEW.status = v_new_status_intermediate; -- 将最终判断的状态赋给NEW.status

    IF NEW.status <> OLD.status THEN
        SET v_status_changed = TRUE;
    END IF;

    IF v_status_changed THEN
        SELECT performance_score INTO v_last_score_this_month
        FROM attendance
        WHERE emp_id = OLD.emp_id
          AND DATE_FORMAT(date, '%Y-%m') = DATE_FORMAT(OLD.date, '%Y-%m')
          AND date < OLD.date
        ORDER BY date DESC, id DESC LIMIT 1;

        IF v_last_score_this_month IS NULL THEN SET v_base_score_for_calc = 100;
        ELSE SET v_base_score_for_calc = v_last_score_this_month;
        END IF;

        CASE NEW.status
            WHEN 2 THEN SET v_deduction = 2;
            WHEN 3 THEN SET v_deduction = 2;
            WHEN 4 THEN SET v_deduction = 5;
            WHEN 5 THEN SET v_deduction = 1;
            ELSE SET v_deduction = 0;
        END CASE;

        SET NEW.performance_score = v_base_score_for_calc - v_deduction;
        IF NEW.performance_score < 0 THEN SET NEW.performance_score = 0; END IF;
    END IF;
END //
DELIMITER ;
-------------------------------------------------------------------------------------------------
部门触发器
DELIMITER //
CREATE TRIGGER trg_dept_delete_protect
BEFORE DELETE ON dept
FOR EACH ROW
BEGIN
    IF (SELECT COUNT(*) FROM emp WHERE dept_id = OLD.id) > 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '该部门下有员工，无法删除！';
    END IF;
END //
DELIMITER ;
-------------------------------------------------------------------------------------------
员工触发器
DELIMITER //
CREATE TRIGGER trg_emp_delete_protect
BEFORE DELETE ON emp
FOR EACH ROW
BEGIN
    -- 检查考勤记录
    IF (SELECT COUNT(*) FROM attendance WHERE emp_id = OLD.id) > 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '该员工存在考勤记录，无法删除！';
    END IF;
    -- 检查请假记录
    IF (SELECT COUNT(*) FROM leave_record WHERE emp_id = OLD.id) > 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '该员工存在请假记录，无法删除！';
    END IF;
END //
DELIMITER ;
------------------------------------------------------------------------------------------------------------
请假表
CREATE TABLE leave_record (
  id INT PRIMARY KEY AUTO_INCREMENT,
  emp_id INT NOT NULL,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  reason VARCHAR(255),
  status TINYINT DEFAULT 0 COMMENT '0待审批 1通过 2拒绝',
  create_time DATETIME DEFAULT CURRENT_TIMESTAMP,
  update_time DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_leave_emp FOREIGN KEY (id) REFERENCES emp(id)
);
-----------------------------------------------------------------------
考勤表
CREATE TABLE attendance (
  id INT PRIMARY KEY AUTO_INCREMENT,
  emp_id INT NOT NULL,
  date DATE NOT NULL,
  check_in_time DATETIME,
  check_out_time DATETIME,
  status TINYINT DEFAULT 1 COMMENT '1正常 2迟到 3早退 4缺卡 5请假',
  create_time DATETIME DEFAULT CURRENT_TIMESTAMP,
  update_time DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  performance_score INT DEFAULT NULL COMMENT '绩效分数',
  CONSTRAINT fk_att_emp FOREIGN KEY (emp_id) REFERENCES emp(id)
);

----------------------------------------------------
CREATE DATABASE `zxyf`;
USE `zxyf`;

部门表
CREATE TABLE `dept` (
  `id` int unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID, 主键',
  `name` varchar(10) NOT NULL COMMENT '部门名称',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='部门表';
---------------------------------------------------------------
员工表
CREATE TABLE `emp` (
  `id` int unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID,主键',
  `username` varchar(20) NOT NULL COMMENT '用户名',
  `password` varchar(50) DEFAULT '123456' COMMENT '密码',
  `name` varchar(10) NOT NULL COMMENT '姓名',
  `gender` tinyint unsigned NOT NULL COMMENT '性别, 1:男, 2:女',
  `phone` char(11) NOT NULL COMMENT '手机号',
  `job` tinyint unsigned DEFAULT NULL COMMENT '职位, 1 经理, 2 总监 , 3 主管, 4 组长, 5 普通员工,6 其他',
  `salary` int unsigned DEFAULT NULL COMMENT '薪资',
  `image` varchar(300) DEFAULT NULL COMMENT '头像',
  `entry_date` date DEFAULT NULL COMMENT '入职日期',
  `dept_id` int unsigned DEFAULT NULL COMMENT '部门ID',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `phone` (`phone`)
) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='员工表';
-------------------------------------------------------------------------------
工作经历表
CREATE TABLE `emp_expr` (
  `id` int unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID, 主键',
  `emp_id` int unsigned DEFAULT NULL COMMENT '员工ID',
  `begin` date DEFAULT NULL COMMENT '开始时间',
  `end` date DEFAULT NULL COMMENT '结束时间',
  `company` varchar(50) DEFAULT NULL COMMENT '公司名称',
  `job` varchar(50) DEFAULT NULL COMMENT '职位',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='工作经历';
-------------------------------------------------------------------------------
帖子表
CREATE TABLE emp_voice (
                           id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '主键',
                           emp_id INT UNSIGNED NOT NULL COMMENT '发帖员工ID',
                           content TEXT NOT NULL COMMENT '帖子内容',
                           create_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '发帖时间',
                           update_time DATETIME DEFAULT NULL COMMENT '修改时间',
                           FOREIGN KEY (emp_id) REFERENCES emp(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='员工心声（论坛）';
-----------------------------------------------------------------------------------------------
评论表
CREATE TABLE emp_voice_comment (
  id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  voice_id INT UNSIGNED NOT NULL COMMENT '帖子ID',
  emp_id INT UNSIGNED NOT NULL COMMENT '评论人ID',
  content TEXT NOT NULL,
  create_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (voice_id) REFERENCES emp_voice(id),
  FOREIGN KEY (emp_id) REFERENCES emp(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='员工心声评论';
-----------------------------------------------------------------------------------------------------
点赞表
CREATE TABLE emp_voice_like (
  id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  voice_id INT UNSIGNED NOT NULL COMMENT '帖子ID',
  emp_id INT UNSIGNED NOT NULL COMMENT '点赞人ID',
  create_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY (voice_id, emp_id),
  FOREIGN KEY (voice_id) REFERENCES emp_voice(id),
  FOREIGN KEY (emp_id) REFERENCES emp(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='员工心声点赞';
-------------------------------------------------------------------------------------------------
公告表
CREATE TABLE `announcement` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '公告ID，主键',
  `title` VARCHAR(100) NOT NULL COMMENT '公告标题',
  `content` TEXT NOT NULL COMMENT '公告内容',
  `create_time` DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='系统公告表';
----------------------------------------------------------------------------------------------------
-- 通知表
CREATE TABLE notification (
  id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '主键',
  sender_id INT UNSIGNED NULL COMMENT '发送者ID，系统通知可为空',
  receiver_id INT UNSIGNED NOT NULL COMMENT '接收者ID',
  type TINYINT UNSIGNED NOT NULL COMMENT '通知类型 (例如: 1请假审批, 2心声评论, 3新公告)',
  content TEXT NOT NULL COMMENT '通知内容',
  related_id INT UNSIGNED NULL COMMENT '关联的业务ID (请假ID, 心声ID等)',
  is_read BOOLEAN NOT NULL DEFAULT FALSE COMMENT '是否已读',
  create_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  FOREIGN KEY (sender_id) REFERENCES emp(id) ON DELETE SET NULL,
  FOREIGN KEY (receiver_id) REFERENCES emp(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='站内通知';
-------------------------------------------------------------------------------------------------------------------------

INSERT INTO `emp` (`id`, `username`, `password`, `name`, `gender`, `phone`, `job`, `salary`, `image`, `entry_date`, `dept_id`, `create_time`, `update_time`) VALUES (1,'shinaian','123456','施耐庵',1,'13309090001',4,NULL,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2000-01-01',2,'2023-10-20 16:35:33','2023-11-16 16:11:26'),(2,'songjiang','123456','宋江',1,'13309090002',2,8600,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2015-01-01',2,'2023-10-20 16:35:33','2023-10-20 16:35:37'),(3,'lujunyi','123456','卢俊义',1,'13309090003',2,8900,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2008-05-01',2,'2023-10-20 16:35:33','2023-10-20 16:35:39'),(4,'wuyong','123456','吴用',1,'13309090004',2,9200,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2007-01-01',2,'2023-10-20 16:35:33','2023-10-20 16:35:41'),(5,'gongsunsheng','123456','公孙胜',1,'13309090005',2,9500,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2012-12-05',2,'2023-10-20 16:35:33','2023-10-20 16:35:43'),(6,'huosanniang','123456','扈三娘',2,'13309090006',3,6500,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2013-09-05',1,'2023-10-20 16:35:33','2023-10-20 16:35:45'),(7,'chaijin','123456','柴进',1,'13309090007',1,4700,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2005-08-01',1,'2023-10-20 16:35:33','2023-10-20 16:35:47'),(8,'likui','123456','李逵',1,'13309090008',1,4800,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2014-11-09',1,'2023-10-20 16:35:33','2023-10-20 16:35:49'),(9,'wusong','123456','武松',1,'13309090009',1,4900,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2011-03-11',1,'2023-10-20 16:35:33','2023-10-20 16:35:51'),(10,'linchong','123456','林冲',1,'13309090010',1,5000,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2013-09-05',1,'2023-10-20 16:35:33','2023-10-20 16:35:53'),(11,'huyanzhuo','123456','呼延灼',1,'13309090011',2,9700,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2007-02-01',2,'2023-10-20 16:35:33','2023-10-20 16:35:55'),(12,'xiaoliguang','123456','小李广',1,'13309090012',2,10000,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2008-08-18',2,'2023-10-20 16:35:33','2023-10-20 16:35:57'),(13,'yangzhi','123456','杨志',1,'13309090013',1,5300,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2012-11-01',1,'2023-10-20 16:35:33','2023-10-20 16:35:59'),(14,'shijin','123456','史进',1,'13309090014',2,10600,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2002-08-01',2,'2023-10-20 16:35:33','2023-10-20 16:36:01'),(15,'sunerniang','123456','孙二娘',2,'13309090015',2,10900,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2011-05-01',2,'2023-10-20 16:35:33','2023-10-20 16:36:03'),(16,'luzhishen','123456','鲁智深',1,'13309090016',2,9600,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2010-01-01',2,'2023-10-20 16:35:33','2023-10-20 16:36:05'),(17,'liying','12345678','李应',1,'13309090017',1,5800,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2015-03-21',1,'2023-10-20 16:35:33','2023-10-20 16:36:07'),(18,'shiqian','123456','时迁',1,'13309090018',2,10200,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2015-01-01',2,'2023-10-20 16:35:33','2023-10-20 16:36:09'),(19,'gudasao','123456','顾大嫂',2,'13309090019',2,10500,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2008-01-01',2,'2023-10-20 16:35:33','2023-10-20 16:36:11'),(20,'ruanxiaoer','123456','阮小二',1,'13309090020',2,10800,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2018-01-01',2,'2023-10-20 16:35:33','2023-10-20 16:36:13'),(21,'ruanxiaowu','123456','阮小五',1,'13309090021',5,5200,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2015-01-01',3,'2023-10-20 16:35:33','2023-10-20 16:36:15'),(22,'ruanxiaoqi','123456','阮小七',1,'13309090022',5,5500,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2016-01-01',3,'2023-10-20 16:35:33','2023-10-20 16:36:17'),(23,'ruanji','123456','阮籍',1,'13309090023',5,5800,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2012-01-01',3,'2023-10-20 16:35:33','2023-10-20 16:36:19'),(24,'tongwei','123456','童威',1,'13309090024',5,5000,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2006-01-01',3,'2023-10-20 16:35:33','2023-10-20 16:36:21'),(25,'tongmeng','123456','童猛',1,'13309090025',5,4800,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2002-01-01',3,'2023-10-20 16:35:33','2023-10-20 16:36:23'),(26,'yanshun','123456','燕顺',1,'13309090026',5,5400,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2011-01-01',3,'2023-10-20 16:35:33','2023-11-08 22:12:46'),(27,'lijun','123456','李俊',1,'13309090027',2,6600,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2004-01-01',2,'2023-10-20 16:35:33','2023-11-16 17:56:59'),(28,'lizhong','123456','李忠',1,'13309090028',5,5000,'https://web-framework.oss-cn-hangzhou.aliyuncs.com/2023/1.jpg','2007-01-01',3,'2023-10-20 16:35:33','2023-11-17 16:34:22')
--------------------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO `dept` (`id`, `name`, `create_time`, `update_time`) VALUES (1,'人事部','2023-09-25 09:47:40','2024-08-24 16:54:35'),(2,'技术部','2023-09-25 09:47:40','2024-08-09 15:17:04'),(3,'市场部','2023-09-25 09:47:40','2024-07-30 21:26:24'),(4,'法务部','2024-08-20 09:50:42','2024-08-20 09:50:42'),(5,'销售部','2024-08-25 16:38:38','2024-08-25 16:38:38'),(6,'财务部','2024-08-25 16:38:38','2024-08-25 16:38:38');
---------------------------------------------------------------------------------------------------------------------------------------------------------
考勤表attendance表因数据量大用python写！！！

import datetime
import random
import mysql.connector  # 需要安装: pip install mysql-connector-python

# --- 全局配置变量 ---
DB_CONFIG = {
    'host': 'localhost',
    'port': 3306,
    'user': 'root',  # 替换为您的 MySQL 用户名
    'password': '123456',  # 替换为您的 MySQL 密码
    'database': 'zxyf'  # 您的数据库名称
}

# 目标年份和要生成数据的日期范围
# 生成2025年3月1日到2025年5月19日的数据
YEAR_TO_GENERATE_DATA_FOR = 2025
DATE_RANGES_TO_GENERATE = [
    (datetime.date(YEAR_TO_GENERATE_DATA_FOR, 3, 1), datetime.date(YEAR_TO_GENERATE_DATA_FOR, 3, 31)),  # 3月
    (datetime.date(YEAR_TO_GENERATE_DATA_FOR, 4, 1), datetime.date(YEAR_TO_GENERATE_DATA_FOR, 4, 30)),  # 4月
    (datetime.date(YEAR_TO_GENERATE_DATA_FOR, 5, 1), datetime.date(YEAR_TO_GENERATE_DATA_FOR, 5, 19))  # 5月1日到19日
]

# 上下班时间规则 (应与触发器中的时间规则匹配)
WORK_START_HOUR = 8
WORK_START_MINUTE = 0
WORK_END_HOUR = 19
WORK_END_MINUTE = 0

# 考勤状态的初步标记 (脚本使用，最终状态由触发器决定)
STATUS_NORMAL_BY_SCRIPT = 1
STATUS_LATE_BY_SCRIPT = 2  # 脚本初步判断为迟到
STATUS_EARLY_LEAVE_BY_SCRIPT = 3  # 脚本初步判断为早退
STATUS_ABSENT_CARD_BY_SCRIPT = 4  # 脚本判断为缺卡


def get_employee_ids_from_db(conn_config):
    """从数据库的 emp 表中获取员工工号 (id) 列表"""
    emp_ids = []
    conn = None
    cursor = None
    try:
        conn = mysql.connector.connect(**conn_config)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM emp")  # emp.id 是员工工号
        rows = cursor.fetchall()
        for row in rows:
            emp_ids.append(row[0])
    except mysql.connector.Error as err:
        print(f"Error fetching employee IDs from database: {err}")
    finally:
        if cursor:
            cursor.close()
        if conn and conn.is_connected():
            conn.close()
    # 如果获取失败，返回一个小的默认列表用于测试，或者您可以选择让程序退出
    return emp_ids if emp_ids else list(range(1, 6))


def generate_random_time_around(base_hour, base_minute, on_time_window_minutes_early=10, on_time_window_minutes_late=5,
                                significant_offset_minutes=60):
    """
    在基础时间前后随机偏移生成时间。
    调整参数以模拟更真实的打卡行为。
    """
    base_datetime = datetime.datetime.combine(datetime.date.today(), datetime.time(base_hour, base_minute))
    roll = random.random()
    offset_minutes = 0

    if base_hour == WORK_START_HOUR:  # 上班打卡模拟
        if roll < 0.70:  # 70% 概率在正常窗口内 (允许早到，稍微晚到一点点)
            offset_minutes = random.randint(-on_time_window_minutes_early, on_time_window_minutes_late)
        elif roll < 0.90:  # 20% 概率迟到 (在significant_offset_minutes内)
            offset_minutes = random.randint(on_time_window_minutes_late + 1, significant_offset_minutes)
        else:  # 10% 概率严重迟到
            offset_minutes = random.randint(significant_offset_minutes + 1,
                                            significant_offset_minutes + 30)  # 比如最多再晚30分钟
    elif base_hour == WORK_END_HOUR:  # 下班打卡模拟
        if roll < 0.70:  # 70% 概率在正常窗口内 (允许稍微早走一点点，或晚走)
            offset_minutes = random.randint(-on_time_window_minutes_late, on_time_window_minutes_early)
        elif roll < 0.90:  # 20% 概率早退 (在significant_offset_minutes内)
            offset_minutes = random.randint(-significant_offset_minutes, -(on_time_window_minutes_late + 1))
        else:  # 10% 概率严重早退
            offset_minutes = random.randint(-(significant_offset_minutes + 30), -(significant_offset_minutes + 1))

    final_datetime = base_datetime + datetime.timedelta(minutes=offset_minutes)
    return final_datetime.time()


def generate_attendance_data(employee_ids, date_ranges_to_generate):
    """为指定的员工和日期范围生成考勤数据"""
    records_to_insert = []

    print(f"Generating data for {len(employee_ids)} employees.")
    print(f"Target date ranges: {date_ranges_to_generate}")

    for start_date_range, end_date_range in date_ranges_to_generate:
        current_date_iter = start_date_range
        while current_date_iter <= end_date_range:
            # 跳过周末 (Python weekday: Monday is 0 and Sunday is 6)
            if current_date_iter.weekday() >= 5:  # 5 for Saturday, 6 for Sunday
                current_date_iter += datetime.timedelta(days=1)
                continue

            for emp_id in employee_ids:
                check_in_time_val = None
                check_out_time_val = None
                # 脚本为status提供一个基于打卡时间的初步猜测，最终status由触发器决定
                initial_status_for_script = STATUS_NORMAL_BY_SCRIPT  # 默认为正常

                action_roll = random.random()
                if action_roll < 0.85:  # 85% 的概率有打卡行为 (可能是完整的，也可能是缺一次)
                    # 模拟上班打卡
                    if random.random() < 0.95:  # 95% 的概率实际打了上班卡
                        cin_time_obj = generate_random_time_around(WORK_START_HOUR, WORK_START_MINUTE, 15, 2)
                        check_in_time_val = datetime.datetime.combine(current_date_iter, cin_time_obj)
                        if cin_time_obj > datetime.time(WORK_START_HOUR, WORK_START_MINUTE):
                            initial_status_for_script = STATUS_LATE_BY_SCRIPT

                    # 模拟下班打卡
                    if random.random() < 0.95:  # 95% 的概率实际打了下班卡
                        cout_time_obj = generate_random_time_around(WORK_END_HOUR, WORK_END_MINUTE, 2, 15)
                        check_out_time_val = datetime.datetime.combine(current_date_iter, cout_time_obj)
                        if cout_time_obj < datetime.time(WORK_END_HOUR,
                                                         WORK_END_MINUTE) and initial_status_for_script != STATUS_LATE_BY_SCRIPT:  # 如果没迟到但早退了
                            initial_status_for_script = STATUS_EARLY_LEAVE_BY_SCRIPT
                        elif cout_time_obj < datetime.time(WORK_END_HOUR,
                                                           WORK_END_MINUTE) and initial_status_for_script == STATUS_LATE_BY_SCRIPT:  # 如果迟到了还早退(特殊情况，status可能需要更复杂逻辑)
                            # 触发器可能需要处理这种组合状态，这里脚本简单标记为早退优先或迟到优先
                            initial_status_for_script = STATUS_EARLY_LEAVE_BY_SCRIPT  # 或者保持 STATUS_LATE_BY_SCRIPT

                    # 根据打卡情况进一步修正初步状态
                    if check_in_time_val is None and check_out_time_val is not None:
                        initial_status_for_script = STATUS_ABSENT_CARD_BY_SCRIPT  # 缺上班卡
                    elif check_in_time_val is not None and check_out_time_val is None:
                        initial_status_for_script = STATUS_ABSENT_CARD_BY_SCRIPT  # 缺下班卡
                    elif check_in_time_val is None and check_out_time_val is None:  # 虽然上面action_roll控制了，但这里双重保险
                        initial_status_for_script = STATUS_ABSENT_CARD_BY_SCRIPT  # 全天缺卡

                else:  # 15% 全天缺卡
                    initial_status_for_script = STATUS_ABSENT_CARD_BY_SCRIPT

                records_to_insert.append((
                    emp_id,
                    current_date_iter.strftime('%Y-%m-%d'),
                    check_in_time_val.strftime('%Y-%m-%d %H:%M:%S') if check_in_time_val else None,
                    check_out_time_val.strftime('%Y-%m-%d %H:%M:%S') if check_out_time_val else None,
                    initial_status_for_script  # Python 脚本传入一个初始状态
                ))
            current_date_iter += datetime.timedelta(days=1)

    return records_to_insert


def insert_data_to_db(records):
    conn = None
    cursor = None
    inserted_count = 0
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()

        # 插入数据时，status 由脚本提供一个初步值，performance_score 由触发器计算
        # 确保SQL语句中的列名与您的表定义完全一致
        sql_insert = """
        INSERT INTO attendance (emp_id, date, check_in_time, check_out_time, status, create_time, update_time) 
        VALUES (%s, %s, %s, %s, %s, NOW(), NOW())
        """

        batch_size = 500
        for i in range(0, len(records), batch_size):
            batch = records[i:i + batch_size]
            try:
                cursor.executemany(sql_insert, batch)
                conn.commit()
                inserted_count += cursor.rowcount
                print(
                    f"Inserted {cursor.rowcount} records in batch {i // batch_size + 1}. Total inserted: {inserted_count}")
            except mysql.connector.Error as batch_err:
                print(f"Error inserting batch {i // batch_size + 1}: {batch_err}")
                print("Problematic batch data (first record of batch):", batch[0] if batch else "Empty batch")
                conn.rollback()  # 回滚当前失败的批次

    except mysql.connector.Error as err:
        print(f"Database connection error or other SQL error: {err}")
    finally:
        if cursor:
            cursor.close()
        if conn and conn.is_connected():
            conn.close()
            print("MySQL connection is closed.")
    return inserted_count


if __name__ == "__main__":
    print("Fetching employee IDs from database...")
    employee_id_list = get_employee_ids_from_db(DB_CONFIG)

    if not employee_id_list:
        print(
            "CRITICAL: No employee IDs found. Please ensure 'emp' table has data or adjust fallback in get_employee_ids_from_db(). Exiting.")
    else:
        print(
            f"Successfully fetched {len(employee_id_list)} employee IDs. Example: {employee_id_list[:min(5, len(employee_id_list))]}")

        print(f"\nGenerating attendance data for specified date ranges up to May 19, {YEAR_TO_GENERATE_DATA_FOR}...")
        generated_records = generate_attendance_data(employee_id_list, DATE_RANGES_TO_GENERATE)

        if generated_records:
            print(f"\nGenerated {len(generated_records)} attendance records.")
            print("Sample of generated data (first 3 records):")
            for rec in generated_records[:3]:
                print(
                    f"  EmpID: {rec[0]}, Date: {rec[1]}, CheckIn: {rec[2]}, CheckOut: {rec[3]}, ScriptInitialStatus: {rec[4]}")

            proceed = input(
                f"\nDo you want to insert these records into the database `{DB_CONFIG['database']}`.`attendance`? (yes/no): ")
            if proceed.lower() == 'yes':
                print("\nOptional: Clearing old data for the specified date ranges...")
                try:
                    conn_temp = mysql.connector.connect(**DB_CONFIG)
                    cursor_temp = conn_temp.cursor()
                    total_cleared = 0
                    for start_r, end_r in DATE_RANGES_TO_GENERATE:
                        delete_query = f"DELETE FROM attendance WHERE date BETWEEN '{start_r.strftime('%Y-%m-%d')}' AND '{end_r.strftime('%Y-%m-%d')}'"
                        print(f"Executing: {delete_query}")
                        cursor_temp.execute(delete_query)
                        total_cleared += cursor_temp.rowcount
                    conn_temp.commit()
                    print(
                        f"{total_cleared} old records cleared for the specified date ranges in {YEAR_TO_GENERATE_DATA_FOR}.")
                    cursor_temp.close()
                    conn_temp.close()
                except mysql.connector.Error as e:
                    print(f"Error clearing old data: {e}")

                print("\nInserting data into the database...")
                total_inserted = insert_data_to_db(generated_records)
                print(f"\nData insertion process finished. Total records effectively inserted: {total_inserted}")
                print(
                    "Please verify the 'status' and 'performance_score' in the 'attendance' table, which should be handled by your triggers.")
                print(
                    "Consider running your `gen_performance` stored procedure if `attendance.performance_score` is not the final monthly cumulative score.")
            else:
                print("Data insertion cancelled by user.")
        else:
            print("No data generated (perhaps no working days in the target range or no employee IDs).")



