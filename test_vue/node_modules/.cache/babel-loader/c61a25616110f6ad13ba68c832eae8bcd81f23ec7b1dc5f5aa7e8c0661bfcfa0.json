{"ast":null,"code":"import { computed, ref, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { House, Message, Document, Edit, Setting, OfficeBuilding, User, Timer, Postcard, EditPen, DocumentChecked, ChatDotRound, Bell } from '@element-plus/icons-vue';\nimport axios from 'axios';\nexport default {\n  __name: 'App',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const router = useRouter();\n    const showSidebar = computed(() => route.path !== '/login' && route.path !== '/register');\n\n    // 获取当前登录用户姓名\n    const userName = computed(() => {\n      const user = localStorage.getItem('user');\n      if (user) {\n        try {\n          return JSON.parse(user).name || '';\n        } catch {\n          return '';\n        }\n      }\n      return '';\n    });\n\n    // 未读通知数量\n    const unreadNotificationCount = ref(0);\n\n    // 获取未读通知数量\n    const fetchUnreadCount = async () => {\n      const token = localStorage.getItem('token');\n      if (!token) return; // 未登录不请求\n      try {\n        const res = await axios.get('/notification/unreadCount', {\n          headers: {\n            token: token\n          }\n        });\n        if (res.data.code === 1) {\n          unreadNotificationCount.value = res.data.data;\n        }\n      } catch (error) {\n        console.error('获取未读通知数量失败', error);\n      }\n    };\n\n    // 导航到通知页面\n    const goToNotifications = () => {\n      router.push('/notification');\n    };\n\n    // 退出登录\n    const logout = () => {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      router.push('/login');\n    };\n\n    // 获取当前登录用户完整信息\n    const currentUserInfo = computed(() => {\n      const userStr = localStorage.getItem('user');\n      if (userStr) {\n        try {\n          return JSON.parse(userStr);\n        } catch (e) {\n          console.error('解析用户信息失败', e);\n          return {};\n        }\n      }\n      return {};\n    });\n\n    // 职位映射（如果你的用户对象中job是数字）\n    const positionMap = {\n      1: '经理',\n      2: '总监',\n      3: '主管',\n      4: '组长',\n      5: '普通员工',\n      6: '其他'\n    };\n    const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : {};\n    const isAdmin = user && user.username === 'admin';\n\n    // 在组件挂载时获取未读通知数量\n    onMounted(() => {\n      fetchUnreadCount();\n      // 可以考虑定时刷新未读数量，或者在某些操作（如标记已读）后刷新\n      // 例如：setInterval(fetchUnreadCount, 60000); // 每分钟刷新一次\n    });\n    const __returned__ = {\n      route,\n      router,\n      showSidebar,\n      userName,\n      unreadNotificationCount,\n      fetchUnreadCount,\n      goToNotifications,\n      logout,\n      currentUserInfo,\n      positionMap,\n      user,\n      isAdmin,\n      computed,\n      ref,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get House() {\n        return House;\n      },\n      get Message() {\n        return Message;\n      },\n      get Document() {\n        return Document;\n      },\n      get Edit() {\n        return Edit;\n      },\n      get Setting() {\n        return Setting;\n      },\n      get OfficeBuilding() {\n        return OfficeBuilding;\n      },\n      get User() {\n        return User;\n      },\n      get Timer() {\n        return Timer;\n      },\n      get Postcard() {\n        return Postcard;\n      },\n      get EditPen() {\n        return EditPen;\n      },\n      get DocumentChecked() {\n        return DocumentChecked;\n      },\n      get ChatDotRound() {\n        return ChatDotRound;\n      },\n      get Bell() {\n        return Bell;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","ref","onMounted","useRoute","useRouter","House","Message","Document","Edit","Setting","OfficeBuilding","User","Timer","Postcard","EditPen","DocumentChecked","ChatDotRound","Bell","axios","route","router","showSidebar","path","userName","user","localStorage","getItem","JSON","parse","name","unreadNotificationCount","fetchUnreadCount","token","res","get","headers","data","code","value","error","console","goToNotifications","push","logout","removeItem","currentUserInfo","userStr","e","positionMap","isAdmin","username"],"sources":["D:/web_code/zxyf/test_vue/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\" style=\"height: 100vh;\">\n    <!-- 侧边栏只在非登录页显示 -->\n    <template v-if=\"showSidebar\">\n      <el-container class=\"main-layout\">\n        <!-- 侧边栏菜单 -->\n        <el-aside width=\"220px\" class=\"side-menu\">\n          <div class=\"logo-area\">\n            <img src=\"/favicon.ico\" class=\"logo-img\" />\n            <span class=\"logo-title\">我爱上班</span>\n          </div>\n\n          <el-menu :default-openeds=\"['2']\" router class=\"custom-menu\">\n            <el-menu-item index=\"/home\"><el-icon><House /></el-icon> 首页</el-menu-item>\n            <el-sub-menu index=\"announcement-manage\" v-if=\"isAdmin\">\n              <template #title><el-icon><Message /></el-icon> 公告管理</template>\n              <el-menu-item index=\"/announcement\"><el-icon><Document /></el-icon> 公告列表</el-menu-item>\n              <el-menu-item index=\"/announcement/update\"><el-icon><Edit /></el-icon> 更新系统公告</el-menu-item>\n            </el-sub-menu>\n            <el-sub-menu index=\"system\">\n              <template #title><el-icon><Setting /></el-icon> 系统信息管理</template>\n              <el-menu-item index=\"/dept\"><el-icon><OfficeBuilding /></el-icon> 部门管理</el-menu-item>\n              <el-menu-item index=\"/emp\"><el-icon><User /></el-icon> 员工管理</el-menu-item>\n              <el-menu-item index=\"/attendance\"><el-icon><Timer /></el-icon> 考勤管理</el-menu-item>\n            </el-sub-menu>\n            <el-sub-menu index=\"profile\">\n              <template #title><el-icon><User /></el-icon> 个人中心</template>\n              <el-menu-item index=\"/profile\"><el-icon><Postcard /></el-icon> 个人信息</el-menu-item>\n              <el-menu-item v-if=\"!isAdmin\" index=\"/leave\"><el-icon><EditPen /></el-icon> 请假申请</el-menu-item>\n              <el-menu-item v-if=\"isAdmin\" index=\"/leave-approval\"><el-icon><DocumentChecked /></el-icon> 请假审批</el-menu-item>\n              <el-menu-item index=\"/notification\"><el-icon><Bell /></el-icon> 我的通知</el-menu-item>\n            </el-sub-menu>\n            <el-menu-item index=\"/voice\"><el-icon><ChatDotRound /></el-icon> 员工心声</el-menu-item>\n          </el-menu>\n        </el-aside>\n        <el-container>\n          <!-- 顶部栏 -->\n          <el-header class=\"main-header\">\n            <div class=\"header-left\">\n              <span class=\"header-title\">我爱上班-员工管理系统</span>\n            </div>\n            <div class=\"header-right\">\n               <el-badge :value=\"unreadNotificationCount\" :hidden=\"unreadNotificationCount === 0\" class=\"notification-badge\">\n                 <el-icon :size=\"24\" @click=\"goToNotifications\" style=\"cursor: pointer; color: #fff;\"><Bell /></el-icon>\n               </el-badge>\n              <el-button type=\"primary\" @click=\"logout\" class=\"logout-btn\" round>退出登录【{{ userName }}】</el-button>\n            </div>\n          </el-header>\n          <!-- 右侧内容区域 -->\n          <el-main class=\"main-content\">\n            <router-view />\n          </el-main>\n        </el-container>\n      </el-container>\n    </template>\n    <template v-else>\n      <router-view />\n    </template>\n  </div>\n</template>\n\n<script setup>\nimport { computed, ref, onMounted } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport { House, Message, Document, Edit, Setting, OfficeBuilding, User, Timer, Postcard, EditPen, DocumentChecked, ChatDotRound, Bell } from '@element-plus/icons-vue'\nimport axios from 'axios'\n\nconst route = useRoute()\nconst router = useRouter()\nconst showSidebar = computed(() => route.path !== '/login' && route.path !== '/register')\n\n// 获取当前登录用户姓名\nconst userName = computed(() => {\n  const user = localStorage.getItem('user')\n  if (user) {\n    try {\n      return JSON.parse(user).name || ''\n    } catch {\n      return ''\n    }\n  }\n  return ''\n})\n\n// 未读通知数量\nconst unreadNotificationCount = ref(0);\n\n// 获取未读通知数量\nconst fetchUnreadCount = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) return; // 未登录不请求\n    try {\n        const res = await axios.get('/notification/unreadCount', { headers: { token: token } });\n        if (res.data.code === 1) {\n            unreadNotificationCount.value = res.data.data;\n        }\n    } catch (error) {\n        console.error('获取未读通知数量失败', error);\n    }\n};\n\n// 导航到通知页面\nconst goToNotifications = () => {\n  router.push('/notification');\n};\n\n// 退出登录\nconst logout = () => {\n  localStorage.removeItem('token')\n  localStorage.removeItem('user')\n  router.push('/login')\n}\n\n// 获取当前登录用户完整信息\nconst currentUserInfo = computed(() => {\n  const userStr = localStorage.getItem('user');\n  if (userStr) {\n    try {\n      return JSON.parse(userStr);\n    } catch (e) {\n      console.error('解析用户信息失败', e);\n      return {};\n    }\n  }\n  return {};\n});\n\n// 职位映射（如果你的用户对象中job是数字）\nconst positionMap = { 1: '经理', 2: '总监', 3: '主管', 4: '组长', 5: '普通员工', 6: '其他' };\n\nconst user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : {}\nconst isAdmin = user && user.username === 'admin'\n\n// 在组件挂载时获取未读通知数量\nonMounted(() => {\n    fetchUnreadCount();\n    // 可以考虑定时刷新未读数量，或者在某些操作（如标记已读）后刷新\n    // 例如：setInterval(fetchUnreadCount, 60000); // 每分钟刷新一次\n});\n</script>\n\n<style>\nbody, html, #app {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  background: #f4f7fa;\n}\n.main-layout {\n  height: 100vh;\n  min-width: 0;\n  background: linear-gradient(135deg, #e0eafc 60%, #f4f7fa 100%);\n}\n.side-menu {\n  background: linear-gradient(135deg, #1976d2 60%, #409EFF 100%) !important;\n  color: #fff !important;\n  border-right: none !important;\n  border-top-right-radius: 24px;\n  border-bottom-right-radius: 24px;\n  box-shadow: 2px 0 24px 0 rgba(25, 118, 210, 0.10);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 0;\n  position: relative;\n}\n.logo-area {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 32px 0 16px 0;\n}\n.logo-img {\n  width: 38px;\n  height: 38px;\n  border-radius: 12px;\n  margin-right: 12px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.08);\n}\n.logo-title {\n  font-size: 22px;\n  font-weight: bold;\n  letter-spacing: 2px;\n  color: #fff;\n  font-family: 'FZShuTi', '微软雅黑', 'Arial';\n}\n.custom-menu {\n  background: transparent !important;\n  color: #fff !important;\n  border: none;\n  width: 100%;\n}\n.custom-menu .el-menu-item.is-active,\n.custom-menu .el-menu-item:hover {\n  background: rgba(255,255,255,0.18) !important;\n  color: #fff !important;\n  border-radius: 8px;\n  font-weight: bold;\n  box-shadow: 0 2px 8px rgba(64,158,255,0.10);\n}\n.custom-menu .el-menu-item {\n  font-size: 16px;\n  margin: 4px 0;\n  border-radius: 8px;\n  transition: background 0.2s, color 0.2s;\n}\n.main-header {\n  min-width: 0;\n  background: linear-gradient(90deg, #19aad2 0%, #42a5f5 60%, #a1c4fd 100%) !important;\n  border-bottom: none !important;\n  font-size: 24px;\n  color: #fff;\n  font-weight: bold;\n  letter-spacing: 2px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 16px;\n  height: 64px !important;\n  box-shadow: 0 4px 20px rgba(25, 118, 210, 0.10);\n  position: relative;\n  overflow: hidden;\n}\n\n.main-header::after {\n  content: '';\n  position: absolute;\n  top: -30px;\n  right: -60px;\n  width: 180px;\n  height: 120px;\n  background: radial-gradient(circle, rgba(255,255,255,0.18) 0%, rgba(255,255,255,0) 80%);\n  z-index: 0;\n}\n\n.header-title {\n  font-family: 'FZShuTi', '微软雅黑', 'Arial';\n  font-size: 28px;\n  color: #1976d2;\n  font-weight: bold;\n  letter-spacing: 2px;\n  text-shadow: 1px 1px 2px rgba(0,0,0,0.08);\n  position: relative;\n  z-index: 1;\n}\n\n.header-right {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n}\n\n.header-right .logout-btn {\n  font-size: 16px;\n  font-weight: bold;\n  border-radius: 20px;\n  background: linear-gradient(90deg, #fffde4 0%, #005bea 100%);\n  border: none;\n  color: #1976d2;\n  box-shadow: 0 2px 8px rgba(25, 118, 210, 0.10);\n  transition: all 0.3s ease;\n  padding: 8px 20px;\n}\n\n.header-right .logout-btn:hover {\n  background: linear-gradient(90deg, #ffe082 0%, #42a5f5 100%);\n  color: #fff;\n  transform: translateY(-1px) scale(1.04);\n  box-shadow: 0 4px 16px rgba(25, 118, 210, 0.18);\n}\n\n.notification-badge :deep(.el-badge__content) {\n   top: 8px;\n   right: 8px;\n   border: 1px solid #fff;\n}\n\n.main-content {\n  flex: 1;\n  background: linear-gradient(135deg, #e0eafc 0%, #cfdef3 100%);\n  padding: 36px 40px 32px 40px;\n  min-width: 0;\n  border-top-left-radius: 32px;\n  border-bottom-left-radius: 32px;\n  box-shadow: -8px 0 24px -8px rgba(64,158,255,0.08) inset;\n  transition: box-shadow 0.3s;\n  min-height: calc(100vh - 64px);\n}\n@media (max-width: 900px) {\n  .main-layout {\n    flex-direction: column;\n  }\n  .side-menu {\n    width: 100vw !important;\n    border-radius: 0 0 24px 24px;\n    min-height: 80px;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    padding: 0;\n  }\n  .main-header {\n    flex-direction: column;\n    height: auto !important;\n    padding: 12px 8px;\n  }\n  .main-content {\n    padding: 16px 4vw;\n    border-radius: 18px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}