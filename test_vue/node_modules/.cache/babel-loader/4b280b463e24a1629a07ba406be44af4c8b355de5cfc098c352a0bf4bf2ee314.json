{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { ElMessage, ElCard, ElInput, ElButton, ElDivider, ElAvatar, ElPagination, ElDialog, ElEmpty, ElIcon, ElTag } from 'element-plus';\nimport { Promotion, Search, Delete, StarFilled, Star, ChatDotRound } from '@element-plus/icons-vue';\nimport dayjs from 'dayjs';\nexport default {\n  __name: 'EmpVoice',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const content = ref('');\n    const voices = ref([]);\n    const page = ref(1);\n    const pageSize = ref(10);\n    const total = ref(0);\n    const keyword = ref('');\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n    const loading = ref(false);\n    const commentDialogVisible = ref(false);\n    const commentDialogContent = ref('');\n    const commentDialogVoiceId = ref(null);\n    const fetchVoices = async () => {\n      loading.value = true;\n      try {\n        const res = await axios.get('/voice/list', {\n          params: {\n            page: page.value,\n            pageSize: pageSize.value,\n            keyword: keyword.value\n          }\n        });\n        if (res.data.code === 1) {\n          console.log('获取到的心声列表数据:', res.data.data.rows);\n          voices.value = res.data.data.rows;\n          total.value = res.data.data.total;\n          // 确保每条心声和评论对象都有 image 字段，即使后端未提供，避免前端报错\n          voices.value.forEach(voice => {\n            if (!voice.image) voice.image = '';\n            voice.comments?.forEach(comment => {\n              if (!comment.image) comment.image = '';\n            });\n          });\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n    onMounted(fetchVoices);\n    const postVoice = async () => {\n      if (!content.value.trim()) {\n        ElMessage.warning('内容不能为空');\n        return;\n      }\n      // 检查用户是否已登录\n      if (!user || !user.id) {\n        ElMessage.error('请先登录');\n        return;\n      }\n      try {\n        const res = await axios.post('/voice/post', {\n          content: content.value\n        }, {\n          headers: {\n            token: localStorage.getItem('token')\n          }\n        });\n        if (res.data.code === 1) {\n          ElMessage.success('发表成功');\n          content.value = '';\n          page.value = 1; // 发表成功后回到第一页\n          fetchVoices();\n        } else {\n          ElMessage.error(res.data.msg || '发表失败');\n        }\n      } catch (error) {\n        ElMessage.error('发表异常');\n        console.error(error);\n      }\n    };\n    const deleteVoice = async id => {\n      // 检查用户是否已登录\n      if (!user || !user.id) {\n        ElMessage.error('请先登录');\n        return;\n      }\n      try {\n        const res = await axios.delete(`/voice/delete/${id}`, {\n          headers: {\n            token: localStorage.getItem('token')\n          }\n        });\n        if (res.data.code === 1) {\n          ElMessage.success('删除成功');\n          fetchVoices();\n        } else {\n          ElMessage.error(res.data.msg || '删除失败');\n        }\n      } catch (error) {\n        ElMessage.error('删除异常');\n        console.error(error);\n      }\n    };\n    const canDelete = item => {\n      console.log('当前用户信息:', user);\n      console.log('当前帖子信息:', item);\n      return user && (user.username === 'admin' || user.id === item.emp_id);\n    };\n    const toggleLike = async item => {\n      // 检查用户是否已登录\n      if (!user || !user.id) {\n        ElMessage.error('请先登录');\n        return;\n      }\n      try {\n        // 优化：先乐观更新 UI，再发送请求\n        if (item.hasLiked) {\n          item.hasLiked = false;\n          item.likeCount = (item.likeCount || 0) - 1;\n          await axios.post(`/voice/unlike/${item.id}`, null, {\n            headers: {\n              token: localStorage.getItem('token')\n            }\n          });\n        } else {\n          item.hasLiked = true;\n          item.likeCount = (item.likeCount || 0) + 1;\n          await axios.post(`/voice/like/${item.id}`, null, {\n            headers: {\n              token: localStorage.getItem('token')\n            }\n          });\n        }\n        // 成功后不需要再 refetchVoices，后端如果返回最新数据更好\n        // fetchVoices() // 如果后端不支持返回最新列表，才需要这行\n      } catch (error) {\n        ElMessage.error('操作失败，请重试');\n        // 如果请求失败，回滚 UI 状态\n        item.hasLiked = !item.hasLiked;\n        item.likeCount = (item.likeCount || 0) + (item.hasLiked ? -1 : 1);\n        console.error(error);\n      }\n    };\n    function openCommentDialog(voiceItem) {\n      // 检查用户是否已登录\n      if (!user || !user.id) {\n        ElMessage.error('请先登录');\n        return;\n      }\n      commentDialogVoiceId.value = voiceItem.id; // 传递整个item或者只传递id都可以，看后续submit需不需要其他信息\n      commentDialogContent.value = '';\n      commentDialogVisible.value = true;\n    }\n    async function submitComment() {\n      if (!commentDialogContent.value.trim()) {\n        ElMessage.warning('评论不能为空');\n        return;\n      }\n      // 检查用户是否已登录\n      if (!user || !user.id) {\n        ElMessage.error('请先登录');\n        return;\n      }\n      if (!commentDialogVoiceId.value) return; // 确保有心声ID\n\n      try {\n        const res = await axios.post('/voice/comment', {\n          voiceId: commentDialogVoiceId.value,\n          content: commentDialogContent.value\n        }, {\n          headers: {\n            token: localStorage.getItem('token')\n          }\n        });\n        if (res.data.code === 1) {\n          ElMessage.success('评论成功');\n          commentDialogVisible.value = false;\n          // 找到对应的心声，手动添加评论，或者刷新列表\n          fetchVoices(); // 刷新列表确保数据一致性\n        } else {\n          ElMessage.error(res.data.msg || '评论失败');\n        }\n      } catch (error) {\n        ElMessage.error('发表评论异常');\n        console.error(error);\n      }\n    }\n    function formatDate(val) {\n      return dayjs(val).format('YYYY-MM-DD HH:mm');\n    }\n    function canDeleteComment(comment) {\n      console.log('当前用户信息:', user);\n      console.log('当前评论信息:', comment);\n      return user && (user.id === comment.emp_id || user.username === 'admin');\n    }\n    async function deleteComment(commentId) {\n      // 检查用户是否已登录\n      if (!user || !user.id) {\n        ElMessage.error('请先登录');\n        return;\n      }\n      try {\n        const res = await axios.delete(`/voice/comment/delete/${commentId}`, {\n          headers: {\n            token: localStorage.getItem('token')\n          }\n        });\n        if (res.data.code === 1) {\n          ElMessage.success('评论删除成功');\n          fetchVoices(); // 删除成功后刷新列表\n        } else {\n          ElMessage.error(res.data.msg || '评论删除失败');\n        }\n      } catch (error) {\n        ElMessage.error('评论删除异常');\n        console.error(error);\n      }\n    }\n    const __returned__ = {\n      content,\n      voices,\n      page,\n      pageSize,\n      total,\n      keyword,\n      user,\n      loading,\n      commentDialogVisible,\n      commentDialogContent,\n      commentDialogVoiceId,\n      fetchVoices,\n      postVoice,\n      deleteVoice,\n      canDelete,\n      toggleLike,\n      openCommentDialog,\n      submitComment,\n      formatDate,\n      canDeleteComment,\n      deleteComment,\n      ref,\n      onMounted,\n      get axios() {\n        return axios;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElCard() {\n        return ElCard;\n      },\n      get ElInput() {\n        return ElInput;\n      },\n      get ElButton() {\n        return ElButton;\n      },\n      get ElDivider() {\n        return ElDivider;\n      },\n      get ElAvatar() {\n        return ElAvatar;\n      },\n      get ElPagination() {\n        return ElPagination;\n      },\n      get ElDialog() {\n        return ElDialog;\n      },\n      get ElEmpty() {\n        return ElEmpty;\n      },\n      get ElIcon() {\n        return ElIcon;\n      },\n      get ElTag() {\n        return ElTag;\n      },\n      get Promotion() {\n        return Promotion;\n      },\n      get Search() {\n        return Search;\n      },\n      get Delete() {\n        return Delete;\n      },\n      get StarFilled() {\n        return StarFilled;\n      },\n      get Star() {\n        return Star;\n      },\n      get ChatDotRound() {\n        return ChatDotRound;\n      },\n      get dayjs() {\n        return dayjs;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","ElMessage","ElCard","ElInput","ElButton","ElDivider","ElAvatar","ElPagination","ElDialog","ElEmpty","ElIcon","ElTag","Promotion","Search","Delete","StarFilled","Star","ChatDotRound","dayjs","content","voices","page","pageSize","total","keyword","user","JSON","parse","localStorage","getItem","loading","commentDialogVisible","commentDialogContent","commentDialogVoiceId","fetchVoices","value","res","get","params","data","code","console","log","rows","forEach","voice","image","comments","comment","postVoice","trim","warning","id","error","post","headers","token","success","msg","deleteVoice","delete","canDelete","item","username","emp_id","toggleLike","hasLiked","likeCount","openCommentDialog","voiceItem","submitComment","voiceId","formatDate","val","format","canDeleteComment","deleteComment","commentId"],"sources":["D:/web_code/zxyf/test_vue/src/components/EmpVoice.vue"],"sourcesContent":["<template>\n  <div class=\"emp-voice-container\">\n    <!-- 发表心声区域 -->\n    <el-card class=\"post-voice-card\">\n      <template #header>\n        <div class=\"card-header\">\n          <span class=\"header-title\">发表你的心声</span>\n          <div class=\"header-desc\">在这里留下你想说的话吧！</div>\n        </div>\n      </template>\n      \n      <div class=\"post-area\">\n        <el-input\n          v-model=\"content\"\n          type=\"textarea\"\n          placeholder=\"说出你的心声吧~\"\n          :rows=\"4\"\n          maxlength=\"500\"\n          show-word-limit\n          class=\"voice-textarea\"\n        />\n        <el-button type=\"primary\" @click=\"postVoice\" class=\"post-button\">\n          <el-icon><Promotion /></el-icon>发表心声\n        </el-button>\n      </div>\n    </el-card>\n\n    <!-- 心声列表区域 -->\n    <el-card class=\"voice-list-card\" v-loading=\"loading\">\n      <template #header>\n        <div class=\"card-header\">\n          <span class=\"header-title\">员工心声列表</span>\n          <div class=\"header-desc\">大家的心声都在这里</div>\n        </div>\n      </template>\n\n      <div class=\"filter-area\">\n        <el-input v-model=\"keyword\" placeholder=\"搜索心声内容或姓名...\" class=\"search-input\" @keyup.enter=\"fetchVoices\" clearable />\n        <el-button @click=\"fetchVoices\" class=\"search-button\">\n          <el-icon><Search /></el-icon>搜索\n        </el-button>\n      </div>\n\n      <div v-if=\"voices.length > 0\" class=\"voice-items-list\">\n        <div class=\"voice-item\" v-for=\"item in voices\" :key=\"item.id\">\n          <div class=\"voice-header\">\n            <template v-if=\"item.image\">\n              <img :src=\"item.image\" :size=\"40\" class=\"voice-avatar-img\"/>\n            </template>\n            <template v-else>\n              <el-avatar :size=\"40\" class=\"voice-avatar\">\n                 {{ item.empName?.charAt(0)?.toUpperCase() }} \n              </el-avatar>\n            </template>\n            <div class=\"voice-meta\">\n              <span class=\"emp-name\">{{ item.empName }}</span>\n              <span class=\"post-time\">{{ formatDate(item.createTime) }}</span>\n            </div>\n          </div>\n          <div class=\"voice-content\">{{ item.content }}</div>\n          <div class=\"voice-actions\">\n            <el-button\n              v-if=\"canDelete(item)\"\n              @click=\"deleteVoice(item.id)\"\n              type=\"danger\"\n              size=\"small\"\n              icon=\"Delete\"\n              circle\n            ></el-button>\n             <el-button\n                @click=\"toggleLike(item)\"\n                size=\"small\"\n                :type=\"item.hasLiked ? 'primary' : 'info'\"\n                :icon=\"item.hasLiked ? 'StarFilled' : 'Star'\"\n              >\n                {{ item.likeCount || 0 }}\n            </el-button>\n             <el-button\n                @click=\"openCommentDialog(item)\"\n                size=\"small\"\n                icon=\"ChatDotRound\"\n              >\n                评论 ({{ item.comments ? item.comments.length : 0 }})\n              </el-button>\n          </div>\n          <!-- 评论列表 -->\n          <div v-if=\"item.comments && item.comments.length > 0\" class=\"comment-list\">\n            <div class=\"comment-item\" v-for=\"c in item.comments\" :key=\"c.id\">\n              <template v-if=\"c.image\">\n                <img :src=\"c.image\" :size=\"28\" class=\"comment-avatar-img\"/>\n              </template>\n              <template v-else>\n                <el-avatar :size=\"28\" class=\"comment-avatar\">\n                   {{ c.empName?.charAt(0)?.toUpperCase() }}\n                </el-avatar>\n              </template>\n              <div class=\"comment-content-wrap\">\n                 <div class=\"comment-meta\">\n                   <span class=\"comment-emp-name\">{{ c.empName }}</span>\n                   <span class=\"comment-time\">{{ formatDate(c.createTime) }}</span>\n                 </div>\n                 <div class=\"comment-text\">{{ c.content }}</div>\n              </div>\n               <el-button\n                v-if=\"canDeleteComment(c)\"\n                @click=\"deleteComment(c.id)\"\n                type=\"danger\"\n                size=\"small\"\n                icon=\"Delete\"\n                circle\n                class=\"delete-comment-button\"\n              ></el-button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <el-empty v-else description=\"暂无心声\"></el-empty>\n\n      <el-pagination\n        :total=\"total\"\n        :page-size=\"pageSize\"\n        :current-page=\"page\"\n        @current-change=\"val => { page = val; fetchVoices() }\"\n        layout=\"prev, pager, next, total\"\n        background\n        class=\"pagination-footer\"\n      />\n    </el-card>\n\n    <!-- 发表评论弹窗 -->\n    <el-dialog v-model=\"commentDialogVisible\" title=\"发表评论\" width=\"400px\" class=\"comment-dialog\">\n      <el-input\n        v-model=\"commentDialogContent\"\n        type=\"textarea\"\n        placeholder=\"请输入评论内容\"\n        maxlength=\"200\"\n        show-word-limit\n        rows=\"4\"\n      />\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"commentDialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitComment\">发表</el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport axios from 'axios'\nimport { ElMessage, ElCard, ElInput, ElButton, ElDivider, ElAvatar, ElPagination, ElDialog, ElEmpty, ElIcon, ElTag } from 'element-plus'\nimport { Promotion, Search, Delete, StarFilled, Star, ChatDotRound } from '@element-plus/icons-vue'\nimport dayjs from 'dayjs'\n\nconst content = ref('')\nconst voices = ref([])\nconst page = ref(1)\nconst pageSize = ref(10)\nconst total = ref(0)\nconst keyword = ref('')\nconst user = JSON.parse(localStorage.getItem('user') || '{}')\n\nconst loading = ref(false)\nconst commentDialogVisible = ref(false)\nconst commentDialogContent = ref('')\nconst commentDialogVoiceId = ref(null)\n\nconst fetchVoices = async () => {\n  loading.value = true\n  try {\n    const res = await axios.get('/voice/list', { params: { page: page.value, pageSize: pageSize.value, keyword: keyword.value } })\n    if (res.data.code === 1) {\n      console.log('获取到的心声列表数据:', res.data.data.rows);\n      voices.value = res.data.data.rows\n      total.value = res.data.data.total\n       // 确保每条心声和评论对象都有 image 字段，即使后端未提供，避免前端报错\n       voices.value.forEach(voice => {\n         if (!voice.image) voice.image = '';\n         voice.comments?.forEach(comment => {\n           if (!comment.image) comment.image = '';\n         });\n       });\n    }\n  } finally {\n    loading.value = false\n  }\n}\n\nonMounted(fetchVoices)\n\nconst postVoice = async () => {\n  if (!content.value.trim()) {\n    ElMessage.warning('内容不能为空')\n    return\n  }\n  // 检查用户是否已登录\n  if (!user || !user.id) {\n      ElMessage.error('请先登录');\n      return;\n  }\n  try {\n    const res = await axios.post('/voice/post', { content: content.value }, { headers: { token: localStorage.getItem('token') } })\n    if (res.data.code === 1) {\n      ElMessage.success('发表成功')\n      content.value = ''\n      page.value = 1; // 发表成功后回到第一页\n      fetchVoices()\n    } else {\n      ElMessage.error(res.data.msg || '发表失败')\n    }\n  } catch (error) {\n      ElMessage.error('发表异常');\n      console.error(error);\n  }\n}\n\nconst deleteVoice = async (id) => {\n   // 检查用户是否已登录\n  if (!user || !user.id) {\n      ElMessage.error('请先登录');\n      return;\n  }\n  try {\n    const res = await axios.delete(`/voice/delete/${id}`, { headers: { token: localStorage.getItem('token') } })\n    if (res.data.code === 1) {\n      ElMessage.success('删除成功')\n      fetchVoices()\n    } else {\n      ElMessage.error(res.data.msg || '删除失败')\n    }\n  } catch (error) {\n      ElMessage.error('删除异常');\n      console.error(error);\n  }\n}\n\nconst canDelete = (item) => {\n  console.log('当前用户信息:', user);\n  console.log('当前帖子信息:', item);\n  return user && (user.username === 'admin' || user.id === item.emp_id)\n}\n\nconst toggleLike = async (item) => {\n    // 检查用户是否已登录\n  if (!user || !user.id) {\n      ElMessage.error('请先登录');\n      return;\n  }\n  try {\n    // 优化：先乐观更新 UI，再发送请求\n    if (item.hasLiked) {\n      item.hasLiked = false;\n      item.likeCount = (item.likeCount || 0) - 1;\n      await axios.post(`/voice/unlike/${item.id}`, null, { headers: { token: localStorage.getItem('token') } });\n    } else {\n      item.hasLiked = true;\n      item.likeCount = (item.likeCount || 0) + 1;\n       await axios.post(`/voice/like/${item.id}`, null, { headers: { token: localStorage.getItem('token') } });\n    }\n     // 成功后不需要再 refetchVoices，后端如果返回最新数据更好\n     // fetchVoices() // 如果后端不支持返回最新列表，才需要这行\n\n  } catch (error) {\n      ElMessage.error('操作失败，请重试');\n       // 如果请求失败，回滚 UI 状态\n      item.hasLiked = !item.hasLiked;\n      item.likeCount = (item.likeCount || 0) + (item.hasLiked ? -1 : 1);\n      console.error(error);\n  }\n}\n\nfunction openCommentDialog(voiceItem) {\n  // 检查用户是否已登录\n  if (!user || !user.id) {\n      ElMessage.error('请先登录');\n      return;\n  }\n  commentDialogVoiceId.value = voiceItem.id // 传递整个item或者只传递id都可以，看后续submit需不需要其他信息\n  commentDialogContent.value = ''\n  commentDialogVisible.value = true\n}\n\nasync function submitComment() {\n  if (!commentDialogContent.value.trim()) {\n    ElMessage.warning('评论不能为空')\n    return\n  }\n   // 检查用户是否已登录\n  if (!user || !user.id) {\n      ElMessage.error('请先登录');\n      return;\n  }\n  if (!commentDialogVoiceId.value) return; // 确保有心声ID\n\n  try {\n    const res = await axios.post('/voice/comment', {\n      voiceId: commentDialogVoiceId.value,\n      content: commentDialogContent.value\n    }, { headers: { token: localStorage.getItem('token') } })\n    if (res.data.code === 1) {\n      ElMessage.success('评论成功')\n      commentDialogVisible.value = false\n      // 找到对应的心声，手动添加评论，或者刷新列表\n      fetchVoices() // 刷新列表确保数据一致性\n    } else {\n      ElMessage.error(res.data.msg || '评论失败')\n    }\n  } catch (error) {\n    ElMessage.error('发表评论异常');\n    console.error(error);\n  }\n}\n\nfunction formatDate(val) {\n  return dayjs(val).format('YYYY-MM-DD HH:mm')\n}\n\nfunction canDeleteComment(comment) {\n  console.log('当前用户信息:', user);\n  console.log('当前评论信息:', comment);\n  return user && (user.id === comment.emp_id || user.username === 'admin')\n}\n\nasync function deleteComment(commentId) {\n    // 检查用户是否已登录\n  if (!user || !user.id) {\n      ElMessage.error('请先登录');\n      return;\n  }\n  try {\n    const res = await axios.delete(`/voice/comment/delete/${commentId}`, { headers: { token: localStorage.getItem('token') } });\n    if (res.data.code === 1) {\n      ElMessage.success('评论删除成功');\n      fetchVoices(); // 删除成功后刷新列表\n    } else {\n      ElMessage.error(res.data.msg || '评论删除失败');\n    }\n  } catch (error) {\n    ElMessage.error('评论删除异常');\n    console.error(error);\n  }\n}\n\n</script>\n\n<style scoped>\n.emp-voice-container {\n  padding: 20px;\n  background-color: #f0f2f5; /* 轻微的背景色 */\n  min-height: calc(100vh - 64px - 40px); /* 减去header和padding的高度 */\n}\n\n.post-voice-card,\n.voice-list-card {\n  margin-bottom: 20px;\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);\n  transition: all 0.3s ease;\n}\n\n.post-voice-card:hover,\n.voice-list-card:hover {\n   transform: translateY(-2px);\n   box-shadow: 0 6px 24px rgba(0, 0, 0, 0.08);\n}\n\n.card-header {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.header-title {\n  font-size: 18px;\n  font-weight: bold;\n  color: #333;\n}\n\n.header-desc {\n  font-size: 13px;\n  color: #909399;\n}\n\n.post-area {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.voice-textarea :deep(.el-textarea__inner) {\n  border-radius: 8px;\n  padding: 10px;\n  font-size: 14px;\n  line-height: 1.6;\n  transition: border-color 0.3s, box-shadow 0.3s;\n}\n\n.voice-textarea :deep(.el-textarea__inner:focus) {\n  border-color: #409EFF;\n  box-shadow: 0 0 0 1px rgba(64, 158, 255, 0.2);\n}\n\n.post-button {\n  align-self: flex-end; /* 按钮靠右对齐 */\n  width: 120px;\n  border-radius: 20px;\n  font-weight: bold;\n  transition: all 0.3s ease;\n}\n\n.post-button:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(64, 158, 255, 0.3);\n}\n\n.filter-area {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 20px;\n}\n\n.search-input {\n  flex-grow: 1;\n}\n\n.search-input :deep(.el-input__inner) {\n    border-radius: 8px;\n}\n\n.search-button {\n    border-radius: 8px;\n}\n\n.voice-items-list {\n  /* 列表容器的样式 */\n}\n\n.voice-item {\n  border-bottom: 1px solid #eee;\n  padding: 15px 0;\n  display: flex;\n  flex-direction: column;\n}\n\n.voice-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.voice-avatar-img {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  object-fit: cover;\n  margin-right: 12px;\n  flex-shrink: 0;\n}\n\n.voice-avatar {\n  margin-right: 12px;\n  flex-shrink: 0; /* 防止头像被挤压 */\n  background: linear-gradient(135deg, #409EFF 0%, #36D1DC 100%); /* 默认头像渐变 */\n  color: #fff;\n  font-weight: bold;\n}\n\n.voice-meta {\n  display: flex;\n  flex-direction: column;\n}\n\n.emp-name {\n  font-weight: bold;\n  color: #333;\n  font-size: 15px;\n}\n\n.post-time {\n  color: #909399;\n  font-size: 12px;\n  margin-top: 2px;\n}\n\n.voice-content {\n  margin: 5px 0 10px 52px; /* 与头像对齐并留出空间 */\n  color: #555;\n  line-height: 1.6;\n  word-break: break-word; /* 自动换行 */\n}\n\n.voice-actions {\n  display: flex;\n  justify-content: flex-end; /* 操作按钮靠右 */\n  align-items: center;\n  margin-top: 8px;\n  gap: 8px; /* 按钮之间的间距 */\n}\n\n.voice-actions .el-button {\n    transition: all 0.2s ease;\n}\n\n.voice-actions .el-button:hover {\n    transform: translateY(-1px);\n}\n\n.comment-list {\n  margin-top: 12px;\n  padding-left: 52px; /* 与心声内容对齐 */\n  border-top: 1px solid #eee;\n  padding-top: 12px;\n  background-color: #fefefe; /* 评论区域浅色背景 */\n  border-radius: 8px;\n}\n\n.comment-item {\n  display: flex;\n  align-items: flex-start;\n  margin-bottom: 12px;\n  padding-bottom: 8px;\n  border-bottom: 1px dashed #eee; /* 评论之间的虚线 */\n  position: relative; /* 为了删除按钮定位 */\n}\n\n.comment-item:last-child {\n    border-bottom: none; /* 最后一个评论没有底线 */\n    padding-bottom: 0;\n}\n\n.comment-avatar-img {\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n  object-fit: cover;\n  margin-right: 10px;\n  flex-shrink: 0;\n}\n\n.comment-avatar {\n  margin-right: 10px;\n  flex-shrink: 0;\n    background: linear-gradient(135deg, #36D1DC 0%, #5B86E5 100%); /* 评论头像渐变 */\n  color: #fff;\n  font-weight: bold;\n}\n\n.comment-content-wrap {\n  flex-grow: 1;\n  min-width: 0; /* 允许在 flex 布局中收缩 */\n}\n\n.comment-meta {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 4px;\n}\n\n.comment-emp-name {\n  font-weight: bold;\n  color: #555;\n  font-size: 13px;\n}\n\n.comment-time {\n  color: #a0a0a0;\n  font-size: 11px;\n}\n\n.comment-text {\n  color: #333;\n  font-size: 14px;\n  line-height: 1.5;\n  word-break: break-word;\n}\n\n.delete-comment-button {\n   margin-left: 8px; /* 按钮与评论内容之间的间距 */\n   /* 可以添加绝对定位等更复杂的布局 */\n}\n\n.el-empty {\n    padding: 40px 0;\n}\n\n.pagination-footer {\n  margin-top: 20px;\n  justify-content: flex-end; /* 分页靠右 */\n  display: flex;\n}\n\n.comment-dialog :deep(.el-dialog__body) {\n    padding: 20px;\n}\n\n.dialog-footer {\n    /* 弹窗底部按钮样式 */\n}\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}